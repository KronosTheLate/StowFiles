// Place your key bindings in this file to override the defaultsauto[]
[
    {
        "key": "ctrl+alt+n",
        "command": "-code-runner.run"
    },
    {
        "key": "alt+enter",
        "command": "-language-julia.executeCodeBlockOrSelectionAndMove",
        "when": "editorTextFocus && editorLangId == 'julia'"
    },
    {
        "key": "shift+enter",
        "command": "-language-julia.executeCellAndMove",
        "when": "editorTextFocus && editorLangId == 'julia'"
    },
    {
        "key": "ctrl+shift+alt+enter",
        "command": "language-julia.executeJuliaCodeInREPL",
        "when": "editorTextFocus && activeEditor != 'workbench.editor.notebook' && editorLangId in 'julia.supportedLanguageIds'"
    },
    {
        "key": "ctrl+enter",
        "command": "-language-julia.executeJuliaCodeInREPL",
        "when": "editorTextFocus && editorLangId == 'julia'"
    },
    {
        "key": "ctrl+alt+c",
        "command": "language-julia.clearAllInlineResults"
    },
    {
        "key": "ctrl+'",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+7",
        "command": "-editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+pageup",
        "command": "language-julia.moveCellUp",
        "when": "editorTextFocus && activeEditor != 'workbench.editor.notebook' && editorLangId in 'julia.supportedLanguageIds'"
    },
    {
        "key": "alt+pagedown",
        "command": "language-julia.moveCellDown",
        "when": "editorTextFocus && activeEditor != 'workbench.editor.notebook' && editorLangId in 'julia.supportedLanguageIds'"
    },
    {
        "key": "ctrl+enter",
        "command": "python.execSelectionInTerminal",
        "when": "editorTextFocus && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "shift+enter",
        "command": "-python.execSelectionInTerminal",
        "when": "editorTextFocus && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "ctrl+shift+k",
        "command": "-quarto.renderShortcut"
    },
    {
        "key": "ctrl+q ctrl+f",
        "command": "editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+[Period]",
        "command": "-editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+n ctrl+p",
        "command": "editor.action.marker.next",
        "when": "editorFocus"
    },
    {
        "key": "alt+f8",
        "command": "-editor.action.marker.next",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+n ctrl+f",
        "command": "explorer.newFile"
    },
    {
        "key": "shift+alt+t",
        "command": "-theme-by-language.setThemeForCurrentFileLanguage"
    },
    {
        "key": "shift+alt+t",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "ctrl+shift+[Equal]",
        "command": "-workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "ctrl+s",
        "command": "workbench.action.files.saveFiles",
        "when": "editorTextFocus && editorLangId = 'typst'"
    },
    {
        "key": "ctrl+s",
        "command": "-workbench.action.files.save"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.openRecent"
    },
    {
        "key": "ctrl+r",
        "command": "code-runner.run"
    },
    {
        "key": "alt+r",
        "command": "-toggleFindRegex",
        "when": "editorFocus"
    },
    {
        "key": "alt+r",
        "command": "-toggleSearchRegex",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+r",
        "command": "workbench.action.terminal.sendSequence",      
        "args": { "text": "\u001b[A\u000d" }       // upArrow followed by a return
    },
    {
        "key": "shift+alt+R",
        "command": "workbench.action.terminal.sendSequence",      
        "args": { "text": "cd build; make && ./KinematicTest; cd .. \u000d" }
    },
    
]